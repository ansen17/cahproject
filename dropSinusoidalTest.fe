//---------------------------------------------------------------------------
// dropSinusoidalTest.fe
// This program creates a SurfaceEvolver data file containing the vertices,
// edges and facets of a drop on a sinusoidal surface with specified
// dimensions.
//  
//
// Michael S. Bell & Anurag Sen
// msb5390@gmail.com & asen94@gmail.com
// August 18, 2015
//--------------------------------------------------------------------------

STRING
SPACE_DIMENSION 2

//Defining physical parameters of the surface and constants

PARAMETER thetaE = 115.0
PARAMETER mode = "Wenzel"
PARAMETER amp = 0.1
PARAMETER lambda = 0.5
PARAMETER tilt_angle = 0
PARAMETER Bo = 1.0

#define SURFT -cos(115.0*pi/180.0)

gravity_constant 0


//Creating the Sinusoidal Surface

constraint surfaceTop nonnegative
formula: y - (1*amp*cos(2*pi*x/lambda)+amp)


quantity grav energy method edge_vector_integral global
vector_integrand:
q1: -y^2/2*Bo*cos(tilt_angle*pi/180.0)
q2: -x^2/2*Bo*sin(tilt_angle*pi/180.0)


//Establishing boundaries with different energy functions 


boundary 1 parameters 1
x1: p1
x2: 1*amp*cos(2*pi*p1/lambda)+amp
energy:
e1: -Bo*amp/(16*pi^2)*(4*1*sin(tilt_angle*pi/180.0)*((2*pi^2*p1^2-lambda^2)*cos(2*pi*p1/lambda)+lambda*(lambda-2*pi*p1*sin(2*pi*p1/lambda)))+amp*pi*cos(tilt_angle*pi/180.0)*(4*(2+(1)^2)*pi*p1+8*1*lambda*sin(2*pi*p1/lambda)+(1)^2*lambda*sin(4*pi*p1/lambda)))+SURFT*(lambda/(2*pi))*incompleteEllipticE(2*pi*x/lambda, -(2*pi*amp/lambda)^2)
content:
c1: (-1)*1*amp*lambda/(2*pi)*sin(2*pi*p1/lambda)-amp*p1


boundary 2 parameters 1
x1: p1
x2: 1*amp*cos(2*pi*p1/lambda)+amp
energy:
e1: -(-Bo*amp/(16*pi^2)*(4*1*sin(tilt_angle*pi/180.0)*((2*pi^2*p1^2-lambda^2)*cos(2*pi*p1/lambda)+lambda*(lambda-2*pi*p1*sin(2*pi*p1/lambda)))+amp*pi*cos(tilt_angle*pi/180.0)*(4*(2+(1)^2)*pi*p1+8*1*lambda*sin(2*pi*p1/lambda)+(1)^2*lambda*sin(4*pi*p1/lambda)))+SURFT*(lambda/(2*pi))*incompleteEllipticE(2*pi*x/lambda, -(2*pi*amp/lambda)^2))
content:
c1: -1*1*amp*lambda/(2*pi)*sin(2*pi*p1/lambda)-amp*p1


boundary 3 parameters 1
x1: p1
x2: 1*amp*cos(2*pi*p1/lambda)+amp


//Creating the droplet on the sinusoidal surface

vertices:
1     1.125 boundary 1
2     1.125 0.889377036975     constraint surfaceTop
3     1.125 1.67875407395     constraint surfaceTop
4     -1.125 1.67875407395     constraint surfaceTop
5     -1.125 0.889377036975     constraint surfaceTop
6     -1.125 boundary 2

// Display vertices:
7     -2.5 boundary 3 fixed
8     -2.25 boundary 3 fixed
9     -2.0 boundary 3 fixed
10     -1.75 boundary 3 fixed
11     -1.5 boundary 3 fixed
12     -1.25 boundary 3 fixed
13     -1.0 boundary 3 fixed
14     -0.75 boundary 3 fixed
15     -0.5 boundary 3 fixed
16     -0.25 boundary 3 fixed
17     0.0 boundary 3 fixed
18     0.25 boundary 3 fixed
19     0.5 boundary 3 fixed
20     0.75 boundary 3 fixed
21     1.0 boundary 3 fixed
22     1.25 boundary 3 fixed
23     1.5 boundary 3 fixed
24     1.75 boundary 3 fixed
25     2.0 boundary 3 fixed
26     2.25 boundary 3 fixed
27     2.5 boundary 3 fixed


edges:
1     1 2     density 1 constraint surfaceTop grav
2     2 3     density 1 constraint surfaceTop grav
3     3 4     density 1 constraint surfaceTop grav
4     4 5     density 1 constraint surfaceTop grav
5     5 6 density 1 constraint surfaceTop grav

// Display edges:
6     7 8 density 0 boundary 3 fixed noncontent
7     8 9 density 0 boundary 3 fixed noncontent
8     9 10 density 0 boundary 3 fixed noncontent
9     10 11 density 0 boundary 3 fixed noncontent
10     11 12 density 0 boundary 3 fixed noncontent
11     12 13 density 0 boundary 3 fixed noncontent
12     13 14 density 0 boundary 3 fixed noncontent
13     14 15 density 0 boundary 3 fixed noncontent
14     15 16 density 0 boundary 3 fixed noncontent
15     16 17 density 0 boundary 3 fixed noncontent
16     17 18 density 0 boundary 3 fixed noncontent
17     18 19 density 0 boundary 3 fixed noncontent
18     19 20 density 0 boundary 3 fixed noncontent
19     20 21 density 0 boundary 3 fixed noncontent
20     21 22 density 0 boundary 3 fixed noncontent
21     22 23 density 0 boundary 3 fixed noncontent
22     23 24 density 0 boundary 3 fixed noncontent
23     24 25 density 0 boundary 3 fixed noncontent
24     25 26 density 0 boundary 3 fixed noncontent
25     26 27 density 0 boundary 3 fixed noncontent


faces:
1     1 2 3 4 5      constraint surfaceTop


bodies:
1     1  volume 3.14159265359 density 1

//zebra outlines the edges in alternating black and white so edges of the droplet are visible 

read
read "zebra.cmd"
//{refine edges where on_boundary 3;} 5
zebra
set edges where on_boundary 3 color black
window_aspect_ratio:=1

// Some commands to help with the evolution process

// refine and update the zebra pattern
rz := { refine edges where not on_boundary 3; zebra;
	set edges where on_boundary 3 color black;
      }

//error calling
call:={printf "%3.9s \n", "TILTANGLE";
  printf "%3.2f \n", tilt_angle;
  printf "%3.9s \n", "AMPLITUDE";
  printf "%3.2f \n", amp;
  printf "%3.9s \n", "BOND_NUMBER";
  printf "%3.2f \n", bo;
  printf "%3.9s \n", "LAMBDA";
  printf "%3.2f \n", lambda;
  printf "%3.9s \n", "THETA_E";
  printf "%3.2f \n", thetaE;}

//Function to get left vertex x-coordinate value of drop
left_vx :={printf "%3.2f \n", vertex[6].x;}

//Function to get right vertex x-coordinate value of drop
right_vx :={printf "%3.2f \n", vertex[1].x;}

//Function to get left vertex y-coordinate value of drop
left_vy :={printf "%3.2f \n", vertex[6].y;}

//Function to get right vertex y-coordinate value of drop
right_vy :={printf "%3.2f \n", vertex[1].y;}

// Function to return the apparent CA at right contact line.
car_app := {if edge[1].x/edge[1].y > 0 then printf "%3.2f \n", 180.0-atan(edge[1].y/edge[1].x)*180.0/pi
      else printf "%3.2f \n", -atan(edge[1].y/edge[1].x)*180.0/pi;}


// Function to return the actual CA at the right contact line.
car := {if edge[1].x/edge[1].y > 0 then printf "%3.2f \n", -atan(1*2*pi*amp/lambda*sin(2*pi*vertex[1].x/lambda))*180/pi+180.0-atan(edge[1].y/edge[1].x)*180.0/pi
  else printf "%3.2f \n", -atan(1*2*pi*amp/lambda*sin(2*pi*vertex[1].x/lambda))*180/pi-atan(edge[1].y/edge[1].x)*180.0/pi;}


// Function to return the apparent CA at the left contact line.
cal_app := {foreach vertex[6].edge do myEdge:=id;
  set edge[myEdge] color red;
  //print myEdge;
  if edge[myEdge].x/edge[myEdge].y > 0 then printf "%3.2f \n", atan(edge[myEdge].y/edge[myEdge].x)*180.0/pi
        else printf "%3.2f \n", 180 + atan(edge[myEdge].y/edge[myEdge].x)*180.0/pi;
  set edge[myEdge] color white;}



// Function to return the actual CA at the left contact line.
cal := {foreach vertex[6].edge do myEdge:=id;
  set edge[myEdge] color red;
  //print myEdge;
  if edge[myEdge].x/edge[myEdge].y > 0 then printf "%3.2f \n", atan(1*2*pi*amp/lambda*sin(2*pi*vertex[6].x/lambda))*180/pi+atan(edge[myEdge].y/edge[myEdge].x)*180.0/pi
  else printf "%3.2f \n", atan(1*2*pi*amp/lambda*sin(2*pi*vertex[6].x/lambda))*180/pi+ 180 + atan(edge[myEdge].y/edge[myEdge].x)*180.0/pi;
  set edge[myEdge] color white;}


//Pre-set evolution one command evolution algorithms

go1 := {g 50;
  rz;
  g 400;
  print "Now set Bo and tilt_angle!";}

go2 := {g 700;
  rz;
  g 13000;
  print "car = "; car;
  print "cal = "; cal;
  print "xA = "; print vertex[1].x;
  print "xR = "; print vertex[7].x;
  print "car_app = "; car_app;
  print "cal_app = "; cal_app;
  }

fun := {print "starting point of fun";
  Bo := 1.0; {g10; V 100;} 20; rz 2;      
  {V 100; g 10;} 25;
  print "finished fun";
  }

//Obtains the average length of the edges in the droplet

function real average_finder(){num_total := 0; 
  number_of_edges := 0;
  foreach edge where on_constraint surfaceTop do{
    lengther:= edge[id].length;   
    //printf "Edge Number  %d   Edge Length   %f\n", id, lengther;
    label:= edge[id].length;
    num_total:= num_total + label;
    number_of_edges := number_of_edges + 1;     
    
  };
  final_answer := num_total/number_of_edges;
  return final_answer;

}

//Obtains the standard deviation of all the edges making the droplet

function real standard_dev(){
  stand_dev := 0;
  number_of_edges:=0;
  sumnum:=0;
  mean:= average_finder();
  foreach edge where on_constraint surfaceTop do{
    stand_dev := stand_dev + sqr(edge[id].length - mean);
    number_of_edges := number_of_edges + 1;
  };
  sumnum := 1 / (number_of_edges-1);
  stand_dev := sqrt(stand_dev/number_of_edges);
  return stand_dev;
} 

//Returns the st. dev. of edges and average length values
//Surface Evolver distinguishes between functions (calculates values) and commands (print values)

stdev := {printf "%f \n", standard_dev();}
    
averageLength:={
  summer:= average_finder();
  printf "%f \n", summer;
}

//Determines how close the droplet interface is to the sinusoidal surface

function real hit_or_miss(real number){
  functionvalue := number;
  op := 0;
  foreach vertex where on_constraint surfaceTop and value_of_constraint surfaceTop < functionvalue do{
    op:= op + 1;
  };
  return op;
} 


// This "am_I_close" function checks if you are close to the sinusoidal surface;
// It will print True or "0" if you are too close to the surface;
// It will print False or "1" if you are fine and far away from the surface;

am_I_close:={
  averager := average_finder();
  boolboolT := "True";
  boolboolF := "False";
  functional_output := 2*amp - (amp*cos(2*pi*averager/(2*lambda))+amp);
  whatsyournumber:= hit_or_miss(functional_output);
  if whatsyournumber == 0 then printf "%s \n", boolboolF else printf "%s \n", boolboolT;
}

// "Smoothes out" the droplet if the droplet interface is too coarse
even_out:={
  mean:= average_finder();
  foreach edge where on_constraint surfaceTop do{
    while edge[id].length/mean > 1.025 do {V 100; printf"%f \n", edge[id].length}; 
    while edge[id].length/mean < 0.975 do {V 100; printf"%f \n", edge[id].length};
  }
} 


//End of Input